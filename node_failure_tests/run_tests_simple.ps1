# node_failure_tests/run_tests_simple.ps1
# Script PowerShell simplificado para executar os testes

Write-Host "üöÄ Sistema de Testes de Falha de N√≥s - Federated Learning" -ForegroundColor Green
Write-Host "======================================================" -ForegroundColor Green

# Verifica Docker
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker detectado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Docker n√£o est√° rodando. Inicie o Docker Desktop primeiro." -ForegroundColor Red
    exit 1
}

# Cria diret√≥rio de resultados
if (!(Test-Path "results")) {
    New-Item -ItemType Directory -Path "results" | Out-Null
    Write-Host "üìÅ Diret√≥rio 'results' criado" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "Selecione o tipo de teste:"
Write-Host "1) Teste √∫nico (r√°pido - 1 cen√°rio)"
Write-Host "2) Execu√ß√£o completa (todos os cen√°rios)"
Write-Host "3) Apenas baseline (sem falhas)"
Write-Host ""

$choice = Read-Host "Digite sua op√ß√£o (1-3)"

if ($choice -eq "1") {
    Write-Host "üéØ Executando teste √∫nico..." -ForegroundColor Yellow
    docker-compose -f docker-compose-test.yml down
    docker-compose -f docker-compose-test.yml run test-orchestrator python node_failure_tests/run_single_scenario.py
    Write-Host "‚úÖ Teste √∫nico finalizado!" -ForegroundColor Green
}
elseif ($choice -eq "2") {
    Write-Host "üß™ Executando todos os cen√°rios..." -ForegroundColor Yellow
    Write-Host "‚è≥ Isso pode levar 30-45 minutos..." -ForegroundColor Yellow
    docker-compose -f docker-compose-test.yml down
    docker-compose -f docker-compose-test.yml up --build
    Write-Host "‚úÖ Testes completos finalizados!" -ForegroundColor Green
}
elseif ($choice -eq "3") {
    Write-Host "üìä Executando baseline..." -ForegroundColor Yellow
    docker-compose -f docker-compose-test.yml down
    docker-compose -f docker-compose-test.yml run test-orchestrator python -c "
import sys
sys.path.append('/app')
from node_failure_tests.test_orchestrator import TestOrchestrator
import time
CLIENT_ENDPOINTS = ['http://client-1:5000/fit', 'http://client-2:5000/fit', 'http://client-3:5000/fit']
orchestrator = TestOrchestrator(CLIENT_ENDPOINTS, num_rounds=8)
orchestrator.run_baseline_training('baseline_' + str(int(time.time())))
"
    Write-Host "‚úÖ Baseline finalizado!" -ForegroundColor Green
}
else {
    Write-Host "‚ùå Op√ß√£o inv√°lida!" -ForegroundColor Red
    exit 1
}

Write-Host ""
Write-Host "üìã Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Verifique os arquivos Excel em .\results\" -ForegroundColor White
Write-Host "‚Ä¢ Execute 'python analyze_results.py' para gr√°ficos" -ForegroundColor White
