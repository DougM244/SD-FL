#!/bin/bash

# node_failure_tests/run_tests.sh
# Script para executar os testes de falha de n√≥s

echo "üöÄ Sistema de Testes de Falha de N√≥s - Federated Learning"
echo "======================================================"

# Verifica se o Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Docker n√£o est√° rodando. Inicie o Docker primeiro."
    exit 1
fi

# Cria diret√≥rio de resultados se n√£o existir
mkdir -p results

echo ""
echo "Selecione o tipo de teste:"
echo "1) Execu√ß√£o completa (todos os cen√°rios)"
echo "2) Teste √∫nico (cen√°rio espec√≠fico)"
echo "3) Apenas baseline (sem falhas)"
echo "4) An√°lise de resultados existentes"
echo ""
read -p "Digite sua op√ß√£o (1-4): " choice

case $choice in
    1)
        echo "üß™ Executando todos os cen√°rios de teste..."
        echo "‚è≥ Isso pode levar 30-45 minutos..."
        
        # Para containers existentes
        docker-compose -f docker-compose-test.yml down
        
        # Inicia os testes
        docker-compose -f docker-compose-test.yml up --build
        
        echo "‚úÖ Testes completos finalizados!"
        echo "üìÅ Verifique os resultados em: ./results/"
        ;;
        
    2)
        echo "üéØ Executando teste de cen√°rio √∫nico..."
        
        # Para containers existentes  
        docker-compose -f docker-compose-test.yml down
        
        # Modifica o comando para executar cen√°rio √∫nico
        export TEST_COMMAND="python node_failure_tests/run_single_scenario.py"
        docker-compose -f docker-compose-test.yml run test-orchestrator $TEST_COMMAND
        
        echo "‚úÖ Teste √∫nico finalizado!"
        ;;
        
    3)
        echo "üìä Executando baseline (sem falhas)..."
        
        # Para containers existentes
        docker-compose -f docker-compose-test.yml down
        
        # Executa apenas baseline
        export TEST_COMMAND="python -c \"
from node_failure_tests.test_orchestrator import TestOrchestrator
CLIENT_ENDPOINTS = ['http://client-1:5000/fit', 'http://client-2:5000/fit', 'http://client-3:5000/fit']
orchestrator = TestOrchestrator(CLIENT_ENDPOINTS, num_rounds=10)
orchestrator.run_baseline_training('baseline_$(date +%Y%m%d_%H%M%S)')
\""
        docker-compose -f docker-compose-test.yml run test-orchestrator bash -c "$TEST_COMMAND"
        
        echo "‚úÖ Baseline finalizado!"
        ;;
        
    4)
        echo "üìà Executando an√°lise de resultados..."
        
        if [ ! -f "requirements.txt" ]; then
            echo "‚ùå Arquivo requirements.txt n√£o encontrado!"
            exit 1
        fi
        
        # Instala depend√™ncias se necess√°rio
        echo "Instalando depend√™ncias de an√°lise..."
        pip install matplotlib seaborn pandas
        
        # Executa an√°lise
        python analyze_results.py
        
        echo "‚úÖ An√°lise finalizada!"
        ;;
        
    *)
        echo "‚ùå Op√ß√£o inv√°lida!"
        exit 1
        ;;
esac

echo ""
echo "üìã Pr√≥ximos passos:"
echo "‚Ä¢ Verifique os arquivos Excel gerados em ./results/"
echo "‚Ä¢ Execute 'python analyze_results.py' para an√°lises visuais"
echo "‚Ä¢ Consulte README.md para interpreta√ß√£o dos resultados"
